name: Build

permissions:
  contents: write
on:
  workflow_dispatch:
  push:
    paths-ignore:
      - '*.md'
    branches:
      - master
      - main
      - release
  pull_request:
    paths-ignore:
      - '*.md'
    branches:
      - master
      - main
      - release

env:
  SOLUTION_NAME: StarboundInventoryUpdater
  OUTPUT_DIR: StarboundInventoryUpdater\bin
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true

jobs:
  precheck:
    runs-on: ubuntu-latest
    outputs:
      buildVersion: ${{ steps.data.outputs.buildVersion }}
      tagName: ${{ steps.data.outputs.tagName }}
      tagExists: ${{ steps.check-version-tag.outputs.tagExists }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Load values
        id: data
        run: |
          buildVersion=$(grep -Ei '<version>[^<]+</version>' "${{ env.SOLUTION_NAME }}/${{ env.SOLUTION_NAME }}.csproj" | sed -e 's/.\+<version>\([^<]\+\)<.\+/\1/i' -)
          echo "buildVersion=$buildVersion" >> "$GITHUB_OUTPUT"
          echo "tagName=v$buildVersion" >> "$GITHUB_OUTPUT"
        shell: bash
      - name: Check if version exists
        id: check-version-tag
        run: |
          if git show-ref --quiet --tags "${{ steps.data.outputs.tagName }}"; then echo "tagExists=true" >> "$GITHUB_OUTPUT"; else echo "tagExists=false" >> "$GITHUB_OUTPUT"; fi
        shell: bash
      - name: Debug
        run: |
          echo "Current version is ${{ steps.data.outputs.buildVersion }} for tag ${{ steps.data.outputs.tagName }} (exists = ${{ steps.check-version-tag.outputs.tagExists }})"
        shell: bash
  build:
    needs: precheck
    if: needs.precheck.outputs.tagExists == 'false'
    strategy:
      matrix:
        configuration: [Debug, Release]
    runs-on: windows-2022
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      # Add MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1
      - name: Build
        run: dotnet build ${{ env.SOLUTION_NAME }}.sln --configuration ${{ matrix.configuration }}
      - name: Zip output
        uses: thedoctor0/zip-release@main
        with:
          type: zip
          filename: ${{ matrix.configuration }}.zip
          directory: ${{ env.OUTPUT_DIR }}\${{ matrix.configuration }}
          path: "*"
          exclusions: "*.zip"
      - name: Upload build
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.configuration }}
          path: ${{ env.OUTPUT_DIR }}\${{ matrix.configuration }}\${{ matrix.configuration }}.zip
          if-no-files-found: error
          retention-days: 1

  deploy:
    needs: [precheck, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Retrieve debug build
        id: download-debug
        uses: actions/download-artifact@v3
        with:
          name: Debug
          path: .
      - name: Retrieve release build
        id: download-release
        uses: actions/download-artifact@v3
        with:
          name: Release
          path: .
      - name: Debug output
        run: |
          echo "Base directory:"
          ls -1HQ --file-type --group-directories-first
          echo
          echo "Debug artifact:"
          ls -1HQR --file-type --group-directories-first ${{steps.download-debug.outputs.download-path}}
          echo
          echo "Release artifact:"
          ls -1HQR --file-type --group-directories-first ${{steps.download-release.outputs.download-path}}
        shell: bash
      - name: Tag commit
        run: |
          git tag -am "[Automated build ${{ env.BUILD_VER }}]" "${{ env.TAG_NAME }}" ${{ env.GITHUB_SHA }}
          git push origin "${{ env.TAG_NAME }}"
        shell: bash
        env:
          BUILD_VER: ${{ needs.precheck.outputs.buildVersion }}
          TAG_NAME: ${{ needs.precheck.outputs.tagName }}
          GIT_AUTHOR_NAME: GitHub Action
          GIT_COMMITTER_NAME: GitHub Action
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
      - name: Make public release
        uses: ncipollo/release-action@v1
        with:
          artifactErrorsFailBuild: true
          artifacts: "${{ steps.download-debug.outputs.download-path }}/Debug.zip,${{ steps.download-release.outputs.download-path }}/Release.zip"
          bodyFile: INSTRUCTIONS.md
          commit: ${{ env.GITHUB_SHA }}
          name: ${{ env.TAG_NAME }}
          tag: ${{ env.TAG_NAME }}
